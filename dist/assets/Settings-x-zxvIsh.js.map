{"version":3,"file":"Settings-x-zxvIsh.js","sources":["../../src/components/Settings.ts"],"sourcesContent":["import { appStore } from '../stores/AppStore'\n\n/**\n * Settings component - User preferences and app configuration\n */\n\nexport function renderSettings(): void {\n  const mainContent = document.getElementById('main-content')\n  if (!mainContent) return\n  \n  mainContent.innerHTML = `\n    <div class=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div class=\"mb-6\">\n        <h1 class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Settings</h1>\n        <p class=\"mt-2 text-gray-600 dark:text-gray-400\">Customize your journal experience</p>\n      </div>\n      \n      <form id=\"settings-form\">\n      <div class=\"space-y-6\">\n        <!-- Appearance Settings -->\n        <div class=\"card\">\n          <h2 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Appearance</h2>\n          \n          <div class=\"space-y-4\">\n            <div>\n              <label for=\"theme-select\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Theme\n              </label>\n              <select id=\"theme-select\" class=\"input-field max-w-xs\">\n                <option value=\"system\">Follow system</option>\n                <option value=\"light\">Light</option>\n                <option value=\"dark\">Dark</option>\n              </select>\n            </div>\n            \n            <div>\n              <label for=\"font-size\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Font Size\n              </label>\n              <select id=\"font-size\" class=\"input-field max-w-xs\">\n                <option value=\"small\">Small</option>\n                <option value=\"medium\" selected>Medium</option>\n                <option value=\"large\">Large</option>\n              </select>\n            </div>\n            \n            <div>\n              <label for=\"font-family\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Font Family\n              </label>\n              <select id=\"font-family\" class=\"input-field max-w-xs\">\n                <option value=\"system\" selected>System Default</option>\n                <option value=\"serif\">Serif</option>\n                <option value=\"mono\">Monospace</option>\n              </select>\n            </div>\n            \n            <div class=\"flex items-center\">\n              <input \n                type=\"checkbox\" \n                id=\"animations-enabled\" \n                class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded\"\n                checked\n              >\n              <label for=\"animations-enabled\" class=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n                Enable animations\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Writing Settings -->\n        <div class=\"card\">\n          <h2 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Writing</h2>\n          \n          <div class=\"space-y-4\">\n            <div class=\"flex items-center\">\n              <input \n                type=\"checkbox\" \n                id=\"auto-save\" \n                class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded\"\n                checked\n              >\n              <label for=\"auto-save\" class=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n                Auto-save entries\n              </label>\n            </div>\n            \n            <div class=\"flex items-center\">\n              <input \n                type=\"checkbox\" \n                id=\"show-word-count\" \n                class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded\"\n                checked\n              >\n              <label for=\"show-word-count\" class=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n                Show word count\n              </label>\n            </div>\n            \n            <div>\n              <label for=\"daily-word-target\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Daily word target\n              </label>\n              <input \n                type=\"number\" \n                id=\"daily-word-target\" \n                class=\"input-field max-w-xs\"\n                value=\"250\"\n                min=\"0\"\n                step=\"50\"\n              >\n            </div>\n            \n            <div>\n              <label for=\"line-height\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Line Height\n              </label>\n              <select id=\"line-height\" class=\"input-field max-w-xs\">\n                <option value=\"compact\">Compact</option>\n                <option value=\"normal\" selected>Normal</option>\n                <option value=\"relaxed\">Relaxed</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Privacy & Security -->\n        <div class=\"card\">\n          <h2 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Privacy & Security</h2>\n          \n          <div class=\"space-y-4\">\n            <div class=\"flex items-center\">\n              <input \n                type=\"checkbox\" \n                id=\"encryption-enabled\" \n                class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded\"\n                checked\n                disabled\n              >\n              <label for=\"encryption-enabled\" class=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n                Encrypt entries locally (always enabled)\n              </label>\n            </div>\n            \n            <div>\n              <button id=\"change-password\" class=\"btn-secondary\">\n                Change Password\n              </button>\n            </div>\n            \n            <div>\n              <button id=\"export-data\" class=\"btn-secondary\">\n                Export All Data\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Storage & Backup -->\n        <div class=\"card\">\n          <h2 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Storage & Backup</h2>\n          \n          <div class=\"space-y-4\">\n            <div class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-lg\">\n              <div class=\"flex justify-between items-center mb-2\">\n                <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Storage Used</span>\n                <span class=\"text-sm text-gray-500 dark:text-gray-400 storage-used-text\">Loading...</span>\n              </div>\n              <div class=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                <div class=\"bg-blue-600 h-2 rounded-full storage-bar\" style=\"width: 0%\"></div>\n              </div>\n            </div>\n            \n            <div>\n              <p class=\"text-sm text-gray-600 dark:text-gray-400 mb-2 entries-count-text\">\n                Loading entries count...\n              </p>\n              <p class=\"text-sm text-gray-600 dark:text-gray-400 backup-info-text\">\n                Loading backup info...\n              </p>\n            </div>\n            \n            <div>\n              <button id=\"clear-cache\" class=\"btn-secondary\">\n                Clear Cache\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Danger Zone -->\n        <div class=\"card border-red-200 dark:border-red-800\">\n          <h2 class=\"text-lg font-semibold text-red-600 dark:text-red-400 mb-4\">Danger Zone</h2>\n          \n          <div class=\"space-y-4\">\n            <div>\n              <button id=\"delete-all-data\" class=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors duration-200\">\n                Delete All Data\n              </button>\n              <p class=\"text-sm text-gray-600 dark:text-gray-400 mt-2\">\n                This will permanently delete all your journal entries. This action cannot be undone.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Save Button -->\n      <div class=\"mt-8 flex justify-end\">\n        <button id=\"save-settings\" class=\"btn-primary\">\n          Save Settings\n        </button>\n      </div>\n      </form>\n    </div>\n  `\n  \n  setupSettings()\n}\n\nfunction setupSettings(): void {\n  // Load current settings\n  loadSettings().catch(error => {\n    console.error('Failed to load settings:', error)\n    showNotification('Failed to load some settings')\n  })\n  \n  // Save settings\n  document.getElementById('save-settings')?.addEventListener('click', () => {\n    saveSettings()\n    showNotification('Settings saved successfully!')\n  })\n  \n  // Theme change\n  document.getElementById('theme-select')?.addEventListener('change', (event) => {\n    const target = event.target as HTMLSelectElement\n    window.dispatchEvent(new CustomEvent('setTheme', { detail: { theme: target.value } }))\n  })\n  \n  // Change password\n  document.getElementById('change-password')?.addEventListener('click', async () => {\n    try {\n      await changePassword()\n    } catch (error) {\n      console.error('Password change failed:', error)\n      showNotification('Password change failed. Please try again.')\n    }\n  })\n  \n  // Export data\n  document.getElementById('export-data')?.addEventListener('click', async () => {\n    try {\n      await exportAllData()\n    } catch (error) {\n      console.error('Export failed:', error)\n      showNotification('Export failed. Please try again.')\n    }\n  })\n  \n  // Clear cache\n  document.getElementById('clear-cache')?.addEventListener('click', async () => {\n    if (confirm('Are you sure you want to clear the cache? This will not delete your entries.')) {\n      try {\n        await clearApplicationCache()\n      } catch (error) {\n        console.error('Clear cache failed:', error)\n        showNotification('Failed to clear cache. Please try again.')\n      }\n    }\n  })\n  \n  // Delete all data\n  document.getElementById('delete-all-data')?.addEventListener('click', async () => {\n    const confirmation = prompt('Type \"DELETE\" to confirm deletion of all data:')\n    if (confirmation === 'DELETE') {\n      try {\n        await deleteAllData()\n      } catch (error) {\n        console.error('Delete failed:', error)\n        showNotification('Failed to delete data. Please try again.')\n      }\n    }\n  })\n}\n\nasync function loadSettings(): Promise<void> {\n  const state = appStore.getState()\n  const user = state.user\n  const themeManager = appStore.getThemeManager()\n  \n  // Load theme setting from ThemeManager\n  const themeSelect = document.getElementById('theme-select') as HTMLSelectElement\n  if (themeSelect) {\n    themeSelect.value = themeManager.getTheme()\n  }\n  \n  // Load real storage statistics\n  await loadStorageStats()\n  \n  if (user && user.preferences) {\n    // Load daily word target\n    const dailyWordTarget = document.getElementById('daily-word-target') as HTMLInputElement\n    if (dailyWordTarget) {\n      dailyWordTarget.value = user.preferences.dailyWordTarget?.toString() || '250'\n    }\n    \n    // Load font size\n    const fontSize = document.getElementById('font-size') as HTMLSelectElement\n    if (fontSize) {\n      fontSize.value = user.preferences.fontSize || 'medium'\n    }\n    \n    // Load font family\n    const fontFamily = document.getElementById('font-family') as HTMLSelectElement\n    if (fontFamily) {\n      fontFamily.value = user.preferences.fontFamily || 'system'\n    }\n    \n    // Load line height\n    const lineHeight = document.getElementById('line-height') as HTMLSelectElement\n    if (lineHeight) {\n      lineHeight.value = user.preferences.lineHeight || 'normal'\n    }\n    \n    // Load other preferences\n    const autoSave = document.getElementById('auto-save') as HTMLInputElement\n    if (autoSave) {\n      autoSave.checked = user.preferences.autoSave !== false // Default to true\n    }\n    \n    const showWordCount = document.getElementById('show-word-count') as HTMLInputElement\n    if (showWordCount) {\n      showWordCount.checked = user.preferences.showWordCount !== false // Default to true\n    }\n    \n    const animationsEnabled = document.getElementById('animations-enabled') as HTMLInputElement\n    if (animationsEnabled) {\n      animationsEnabled.checked = user.preferences.enableAnimations !== false // Default to true\n    }\n  }\n}\n\nasync function saveSettings(): Promise<void> {\n  const themeManager = appStore.getThemeManager()\n  \n  // Get form values with proper type casting\n  const theme = (document.getElementById('theme-select') as HTMLSelectElement).value as 'light' | 'dark' | 'system'\n  const fontSize = (document.getElementById('font-size') as HTMLSelectElement)?.value as 'small' | 'medium' | 'large' || 'medium'\n  const fontFamily = (document.getElementById('font-family') as HTMLSelectElement)?.value as 'system' | 'serif' | 'mono' || 'system'\n  const enableAnimations = (document.getElementById('animations-enabled') as HTMLInputElement).checked\n  const autoSave = (document.getElementById('auto-save') as HTMLInputElement).checked\n  const showWordCount = (document.getElementById('show-word-count') as HTMLInputElement).checked\n  const dailyWordTarget = parseInt((document.getElementById('daily-word-target') as HTMLInputElement).value) || 250\n  const lineHeight = (document.getElementById('line-height') as HTMLSelectElement)?.value as 'compact' | 'normal' | 'relaxed' || 'normal'\n  \n  const settings = {\n    fontSize,\n    fontFamily,\n    enableAnimations,\n    autoSave,\n    showWordCount,\n    dailyWordTarget,\n    lineHeight\n  }\n  \n  try {\n    // Apply theme immediately using ThemeManager\n    themeManager.setTheme(theme)\n    \n    // Get current user and update preferences\n    const state = appStore.getState()\n    if (state.user) {\n      // Update user preferences in appStore\n      await appStore.updateUserPreferences({\n        ...state.user.preferences,\n        ...settings\n      })\n      \n      // Apply visual preferences immediately\n      applyVisualPreferences(settings)\n      \n      showNotification('Settings saved successfully!')\n    }\n  } catch (error) {\n    console.error('Failed to save settings:', error)\n    showNotification('Failed to save settings. Please try again.')\n    throw error\n  }\n}\n\n/**\n * Apply visual preferences to the document\n */\nfunction applyVisualPreferences(preferences: any): void {\n  const root = document.documentElement\n  \n  // Apply font size\n  root.classList.remove('text-sm', 'text-base', 'text-lg')\n  switch (preferences.fontSize) {\n    case 'small':\n      root.classList.add('text-sm')\n      break\n    case 'large':\n      root.classList.add('text-lg')\n      break\n    default:\n      root.classList.add('text-base')\n  }\n  \n  // Apply font family\n  root.classList.remove('font-serif', 'font-mono')\n  switch (preferences.fontFamily) {\n    case 'serif':\n      root.classList.add('font-serif')\n      break\n    case 'mono':\n      root.classList.add('font-mono')\n      break\n    // 'system' uses default sans-serif\n  }\n  \n  // Apply animations preference\n  if (!preferences.enableAnimations) {\n    root.classList.add('motion-reduce')\n  } else {\n    root.classList.remove('motion-reduce')\n  }\n}\n\n/**\n * Change user password (requires re-encrypting all data)\n */\nasync function changePassword(): Promise<void> {\n  const currentPassword = prompt('Enter your current password:')\n  if (!currentPassword) {\n    throw new Error('Current password is required')\n  }\n  \n  const newPassword = prompt('Enter your new password:')\n  if (!newPassword) {\n    throw new Error('New password is required')\n  }\n  \n  if (newPassword.length < 8) {\n    throw new Error('New password must be at least 8 characters long')\n  }\n  \n  const confirmPassword = prompt('Confirm your new password:')\n  if (newPassword !== confirmPassword) {\n    throw new Error('Passwords do not match')\n  }\n  \n  try {\n    // First, verify current password by trying to decrypt data\n    const storageManager = appStore.getStorageManager()\n    \n    // Export all data with current password\n    const exportedData = await storageManager.exportData()\n    \n    // Clear all data\n    await storageManager.clearAllData()\n    \n    // Re-initialize storage with new password\n    await storageManager.initialize(newPassword)\n    \n    // Re-save user data with new encryption\n    if (exportedData.user) {\n      await storageManager.saveUser(exportedData.user)\n    }\n    \n    // Re-save all entries with new encryption\n    for (const entry of exportedData.entries) {\n      await storageManager.saveEntry(entry)\n    }\n    \n    // Re-save settings\n    for (const [key, value] of Object.entries(exportedData.settings)) {\n      await storageManager.saveSetting(key, value)\n    }\n    \n    showNotification('Password changed successfully!')\n    \n    // Refresh the page to ensure clean state\n    setTimeout(() => {\n      window.location.reload()\n    }, 2000)\n  } catch (error) {\n    console.error('Password change failed:', error)\n    if (error instanceof Error && error.message.includes('decrypt')) {\n      throw new Error('Current password is incorrect')\n    }\n    throw error\n  }\n}\n\n/**\n * Clear application cache and temporary data\n */\nasync function clearApplicationCache(): Promise<void> {\n  try {\n    // Clear browser caches if available\n    if ('caches' in window) {\n      const cacheNames = await caches.keys()\n      await Promise.all(\n        cacheNames.map(cacheName => caches.delete(cacheName))\n      )\n    }\n    \n    // Clear localStorage items that aren't critical\n    const keysToKeep = ['theme', 'user-session']\n    const keysToRemove = []\n    \n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i)\n      if (key && !keysToKeep.includes(key)) {\n        keysToRemove.push(key)\n      }\n    }\n    \n    keysToRemove.forEach(key => localStorage.removeItem(key))\n    \n    // Clear sessionStorage\n    sessionStorage.clear()\n    \n    showNotification('Cache cleared successfully!')\n  } catch (error) {\n    console.error('Clear cache failed:', error)\n    throw error\n  }\n}\n\n/**\n * Delete all user data permanently\n */\nasync function deleteAllData(): Promise<void> {\n  try {\n    // Clear all data from storage\n    await appStore.clearAllData()\n    \n    showNotification('All data deleted successfully!')\n    \n    // Redirect to login/welcome page after a short delay\n    setTimeout(() => {\n      window.location.href = '/'\n    }, 2000)\n  } catch (error) {\n    console.error('Delete failed:', error)\n    throw error\n  }\n}\n\n/**\n * Export all user data as JSON file\n */\nasync function exportAllData(): Promise<void> {\n  try {\n    const storageManager = appStore.getStorageManager()\n    const data = await storageManager.exportData()\n    \n    // Add metadata\n    const exportData = {\n      ...data,\n      exportedAt: new Date().toISOString(),\n      version: '1.0',\n      source: 'journalfor.me'\n    }\n    \n    // Create downloadable file\n    const jsonString = JSON.stringify(exportData, null, 2)\n    const blob = new Blob([jsonString], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    \n    // Create download link\n    const link = document.createElement('a')\n    link.href = url\n    link.download = `journalfor-me-export-${new Date().toISOString().split('T')[0]}.json`\n    \n    // Trigger download\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n    \n    // Clean up\n    URL.revokeObjectURL(url)\n    \n    showNotification('Data exported successfully!')\n  } catch (error) {\n    console.error('Export failed:', error)\n    throw error\n  }\n}\n\n/**\n * Load real storage statistics and update the UI\n */\nasync function loadStorageStats(): Promise<void> {\n  try {\n    const storageManager = appStore.getStorageManager()\n    const stats = await storageManager.getStorageStats()\n    const state = appStore.getState()\n    \n    // Update storage used display\n    const storageUsedElement = document.querySelector('.storage-used-text')\n    const storageBarElement = document.querySelector('.storage-bar') as HTMLElement\n    const entriesCountElement = document.querySelector('.entries-count-text')\n    \n    // Format storage size\n    const sizeInMB = (stats.totalSize / (1024 * 1024)).toFixed(2)\n    const maxStorageMB = 100 // Assume 100MB limit for IndexedDB\n    const usagePercentage = Math.min((parseFloat(sizeInMB) / maxStorageMB) * 100, 100)\n    \n    if (storageUsedElement) {\n      storageUsedElement.textContent = `${sizeInMB} MB / ${maxStorageMB} MB`\n    }\n    \n    if (storageBarElement) {\n      storageBarElement.style.width = `${usagePercentage}%`\n    }\n    \n    if (entriesCountElement) {\n      entriesCountElement.innerHTML = `<strong>${stats.entriesCount} entries</strong> stored locally`\n    }\n    \n    // Update last backup info\n    const backupInfoElement = document.querySelector('.backup-info-text')\n    if (backupInfoElement) {\n      const lastSyncAt = state.lastSyncAt\n      if (lastSyncAt) {\n        backupInfoElement.textContent = `Last backup: ${lastSyncAt.toLocaleDateString()}`\n      } else {\n        backupInfoElement.textContent = 'Last backup: Never (cloud sync not enabled)'\n      }\n    }\n  } catch (error) {\n    console.error('Failed to load storage stats:', error)\n  }\n}\n\nfunction showNotification(message: string): void {\n  const notification = document.createElement('div')\n  notification.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 animate-slide-down'\n  notification.textContent = message\n  \n  document.body.appendChild(notification)\n  \n  setTimeout(() => {\n    notification.remove()\n  }, 3000)\n}\n"],"names":["renderSettings","mainContent","setupSettings","loadSettings","error","showNotification","saveSettings","event","target","changePassword","exportAllData","clearApplicationCache","deleteAllData","user","appStore","themeManager","themeSelect","loadStorageStats","dailyWordTarget","fontSize","fontFamily","lineHeight","autoSave","showWordCount","animationsEnabled","theme","enableAnimations","settings","state","applyVisualPreferences","preferences","root","newPassword","confirmPassword","storageManager","exportedData","entry","key","value","cacheNames","cacheName","keysToKeep","keysToRemove","i","exportData","jsonString","blob","url","link","stats","storageUsedElement","storageBarElement","entriesCountElement","sizeInMB","maxStorageMB","usagePercentage","backupInfoElement","lastSyncAt","message","notification"],"mappings":"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"}